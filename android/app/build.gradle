final Properties localProperties = new Properties()
final def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
  localPropertiesFile.withReader('UTF-8') { final reader ->
    localProperties.load(reader)
  }
}

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
final def enableProguardInReleaseBuilds = true

final def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
  throw new Exception('Flutter SDK not found. Define location with flutter.sdk in the local.properties file.')
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
  flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
  flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
dependencies {
  implementation 'com.google.android.gms:play-services-auth:20.5.0'
}

apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

final def keystoreProperties = new Properties()
final def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
  // ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
  flavorDimensions "flavor-type"

  productFlavors {
    development {
      dimension "flavor-type"
      applicationId "dev.helpis.utilities_example.development"
      resValue "string", "app_name", "Utilities Example Development"
    }
    production {
      dimension "flavor-type"
      applicationId "dev.helpis.utilities_example.production"
      resValue "string", "app_name", "Utilities Example Production"
    }
  }
  // ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----

  lintOptions {
    disable 'InvalidPackage'
    checkReleaseBuilds false
  }

  signingConfigs {
    debug {
      if (project.hasProperty('UTILITIES_EXAMPLE_UPLOAD_STORE_FILE')) {
        storeFile file(UTILITIES_EXAMPLE_UPLOAD_STORE_FILE)
        storePassword UTILITIES_EXAMPLE_UPLOAD_STORE_PASSWORD
        keyAlias UTILITIES_EXAMPLE_DEBUG_KEY_ALIAS
        keyPassword UTILITIES_EXAMPLE_UPLOAD_KEY_PASSWORD
      }
    }
    release {
      keyAlias keystoreProperties['keyAlias']
      keyPassword keystoreProperties['keyPassword']
      storeFile file(keystoreProperties['storeFile'])
      storePassword keystoreProperties['storePassword']
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      signingConfig signingConfigs.release
      profile {
        matchingFallbacks = ['debug', 'release']
      }
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  compileSdkVersion flutter.compileSdkVersion
  ndkVersion '25.1.8937393'

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  splits {
    abi {
      enable true
      reset()
      include 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'arm64-v8a'
      universalApk true
    }
  }

  kotlinOptions {
    jvmTarget = '1.8'
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }

  defaultConfig {
    applicationId 'dev.helpis.utilities_example'
    minSdkVersion flutter.minSdkVersion
    targetSdkVersion flutter.targetSdkVersion
    versionCode flutterVersionCode.toInteger()
    versionName flutterVersionName
    multiDexEnabled true
  }

  buildToolsVersion '33.0.0'
}

flutter {
  source '../..'
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation 'com.android.support:multidex:2.0.1'
}
